syntax = "proto3";
package torganized_service;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

option java_multiple_files = true;
option java_package = "de.paladinsinn.torganized.grpc";
option java_outer_classname = "TorganizedServiceProto";


service StormKnightService {
  rpc CreateStormKnight (StormKnightGrpc) returns (StormKnightGrpc) {}
  rpc RetrieveStormKnight (StormKnightRetrieveRequest) returns (StormKnightList) {}
  rpc UpdateStormKnight (StormKnightGrpc) returns (StormKnightGrpc) {}
  rpc DeleteStormKnight (StormKnightRetrieveRequest) returns (StormKnightList) {}
}


message StormKnightRetrieveRequest {
  optional PageGrpc page = 1;
  optional string id = 2;
  optional string name = 3;
  optional ClearanceGrpc security_clearance = 4;
  optional string owner = 5;
  optional string engagement = 6;
  optional string mission = 7;
}

message StormKnightList {
  PageGrpc header = 1;
  repeated StormKnightGrpc data = 2;
}

message StormKnightGrpc {
  optional MetadataGrpc metadata = 1;
  string name = 2;
  ClearanceGrpc security_clearance = 3;
  uint32 xp = 4;
  uint32 money = 5;
  optional PictureGrpc avatar = 6;
  optional PictureGrpc token = 7;
  string cosm = 8;
}

service PersonService {
  rpc CreatePerson (PersonGrpc) returns (PersonGrpc) {}
  rpc RetrievePerson (PersonRetrieveRequest) returns (PersonList) {}
  rpc UpdatePerson (PersonGrpc) returns (PersonGrpc) {}
  rpc DeletePerson (PersonRetrieveRequest) returns (PersonList) {}
}

message PersonList {
  PageGrpc header = 1;
  repeated PersonGrpc data = 2;
}

message PersonGrpc {
  optional MetadataGrpc metadata = 1;
  string name = 2;
  repeated PersonType person_types = 3;
  optional PictureGrpc avatar = 4;
  repeated StormKnightGrpc storm_knights = 5;
  repeated uint64 storm_knight_id = 6;
}

message PersonRetrieveRequest {
  optional PageGrpc page = 1;
  optional string id = 2;
  optional string name = 3;
  optional string owner = 4;
  repeated PersonType person_types = 5;
  optional string engagement = 6;
  optional string mission = 7;
}

enum PersonType {
  PLAYER = 0;
  GM = 1;
  ORGA = 2;
  JUDGE = 3;
}

service MissionService {
  rpc CreateMission (MissionGrpc) returns (MissionGrpc) {}
  rpc RetrieveMission (MissionRetrieveRequest) returns (MissionList) {}
  rpc UpdateMission (MissionGrpc) returns (MissionGrpc) {}
  rpc DeleteMission (MissionRetrieveRequest) returns (MissionList) {}
}

message MissionList {
  PageGrpc header = 1;
  repeated MissionGrpc data = 2;
}

message MissionGrpc {
  optional MetadataGrpc metadata = 1;
  ClearanceGrpc level = 2;
  optional PictureGrpc cover_picture = 3;
  repeated DescriptionGrpc descriptions = 4;
  optional TimespanGrpc time_span = 5;
  optional TorgResultGrpc result = 6;
  repeated CosmGrpc cosms = 7;
}

message MissionRetrieveRequest {
  optional PageGrpc page = 1;
  optional string id = 2;
  optional string name = 3;
  optional ClearanceGrpc security_clearance = 4;
  optional string owner = 5;
  optional TimespanGrpc time_span = 6;
  optional string engagment = 7;
  optional bool include_results = 8;
}

service EngagementService {
  rpc CreateEngagement (EngagementGrpc) returns (EngagementGrpc) {}
  rpc RetrieveEngagement (EngagementRetrieveRequest) returns (EngagementList) {}
  rpc UpdateEngagement (EngagementGrpc) returns (EngagementGrpc) {}
  rpc DeleteEngagement (EngagementRetrieveRequest) returns (EngagementList) {}
}

message EngagementGrpc {
  optional MetadataGrpc metadata = 1;
  uint64 mission = 2;
  repeated uint64 storm_knights = 3;
  optional EngagementResult result = 4;
}

message EngagementResult {
  TorgResultGrpc result = 1;
  optional string description = 2;
  repeated EngagementStormKnightResult storm_knight_results = 3;
}

message EngagementStormKnightResult {
  uint64 storm_knight = 1;
  optional string description = 2;
}

message EngagementList {
  PageGrpc header = 1;
  repeated EngagementGrpc data = 2;
}
message EngagementRetrieveRequest {
  optional PageGrpc page = 1;
  optional uint64 id = 2;
  optional uint64 owner = 3;
  optional uint64 mission = 4;
  repeated uint64 storm_knights = 5;
  optional TimespanGrpc time_span = 6;
}

service SpecialEngagementService {
  rpc CreateSpecialEngagement (SpecialEngagementGrpc) returns (SpecialEngagementGrpc) {}
  rpc RetrieveSpecialEngagement (SpecialEngagementRetrieveRequest) returns (SpecialEngagementList) {}
  rpc UpdateSpecialEngagement (SpecialEngagementGrpc) returns (SpecialEngagementGrpc) {}
  rpc DeleteSpecialEngagement (SpecialEngagementRetrieveRequest) returns (SpecialEngagementList) {}
}

message SpecialEngagementGrpc {
  optional MetadataGrpc metadata = 1;
  ClearanceGrpc level = 2;
  optional PictureGrpc cover_picture = 3;
  repeated DescriptionGrpc descriptions = 4;
  optional TimespanGrpc time_span = 5;
  repeated CosmGrpc cosms = 6;
  repeated uint64 storm_knights = 7;
  optional TorgResultGrpc result = 8;
  optional string result_description = 9;
  repeated EngagementStormKnightResult storm_knight_results = 10;
}

message SpecialEngagementList {
  PageGrpc header = 1;
  repeated SpecialEngagementGrpc data = 2;
}
message SpecialEngagementRetrieveRequest {
  optional PageGrpc page = 1;
  optional uint64 id = 2;
  optional uint64 owner = 3;
  repeated uint64 storm_knights = 5;
}

service CosmService {
  rpc CreateCosm (CosmGrpc) returns (CosmGrpc) {}
  rpc RetrieveCosm (CosmRetrieveRequest) returns (CosmList) {}
  rpc UpdateCosm (CosmGrpc) returns (CosmGrpc) {}
  rpc DeleteCosm (CosmRetrieveRequest) returns (CosmList) {}
}

message CosmRetrieveRequest {
  optional PageGrpc page = 1;
  optional string name = 2;
  optional string mission = 3;
  repeated string storm_knights = 4;
  optional TimespanGrpc time_span = 5;
}
message CosmList {
  PageGrpc header = 1;
  repeated CosmGrpc data = 2;
}

message CosmGrpc {
  string name = 1;
  uint32 magic = 3;
  uint32 spirit = 4;
  uint32 social = 5;
}


message MetadataGrpc {
  optional uint64 id = 1;
  optional uint64 owner = 2;
  optional google.protobuf.Timestamp created = 3;
  optional google.protobuf.Timestamp modified = 4;
}

message DescriptionGrpc {
  LanguageGrpc language = 1;
  string title = 2;
  string short_description = 3;
  string long_description = 4;
}

service PictureService {
  rpc CreatePicture (PictureGrpc) returns (PictureGrpc) {};
  rpc RetrievePicture (MetadataGrpc) returns (PictureGrpc) {};
  rpc UpdatePicture (PictureGrpc) returns (PictureGrpc) {};
  rpc DeletePicture (MetadataGrpc) returns (PictureGrpc) {};
}

message PictureGrpc {
  optional MetadataGrpc metadata = 1;
  string url = 2;
  string mime_type = 3;
  uint64 size = 4;
  repeated DescriptionGrpc descriptions = 5;
}

enum ClearanceGrpc {
  ANY = 0;
  ALPHA = 1;
  BETA = 2;
  GAMA = 3;
  DELTA = 4;
  OMEGA = 5;
}

enum TorgResultGrpc {
  FAILED = 0;
  SUCCESSFUL = 1;
  GOOD = 2;
  OUTSTANDING = 3;
}

enum LanguageGrpc {
  DEU = 0;
  ENG = 1;
  FRA = 2;
  SPA = 3;
  NLD = 4;
}

message TimespanGrpc {
  google.protobuf.Timestamp from = 1;
  google.protobuf.Duration duration = 2;
}

message PageGrpc {
  uint32 start = 1;
  uint32 size = 2;
  optional uint32 length = 3;
  PageGrpc first = 4;
  PageGrpc last = 5;
  optional PageGrpc previous = 6;
  optional PageGrpc next = 7;
}