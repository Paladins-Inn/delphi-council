---
kind: Deployment
apiVersion: apps/v1
metadata:
  namespace: "{{ .Release.Namespace }}"
  name: "{{ .Chart.Name }}-app"
  labels:
    app.kubernetes.io/name: "{{ .Chart.Name }}"
    app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
    app.kubernetes.io/component: "app"
    app.kubernetes.io/part-of: "{{ .Chart.Name }}"
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ .Chart.Name }}"
      app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
      app.kubernetes.io/component: "app"
      app.kubernetes.io/part-of: "{{ .Chart.Name }}"
  strategy:
    type: RollingUpdate
  template:
    metadata:
      name: "{{ .Chart.Name }}-app"
      labels:
        app.kubernetes.io/name: "{{ .Chart.Name }}"
        app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
        app.kubernetes.io/component: "app"
        app.kubernetes.io/part-of: "{{ .Chart.Name }}"
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: "{{ .Chart.Name }}-app"
        image: 'docker-registry.default.svc:5000/{{ .Release.Namespace }}/delphi-council-is:{{ .Chart.AppVersion }}'
        imagePullPolicy: Always
        resources:
          limits:
            cpu: {{ .Values.app.limits.cpu }}
            memory: {{ .Values.app.limits.memory }}
          requests:
            cpu: {{ .Values.app.requests.cpu }}
            memory: {{ .Values.app.requests.memory }}
        env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: delphi-council-is-db
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: delphi-council-is-db
        - name: DB_DATABASE
          valueFrom:
            secretKeyRef:
              key: database-name
              name: delphi-council-is-db
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8443
          protocol: TCP
        readinessProbe:
          failureThreshold: 1
          httpGet:
            path: /actuator/health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /deployments/config/application.properties
          name: config-volume
          subPath: application.properties
      volumes:
        - configMap:
            defaultMode: 420
            items:
              - key: application.properties
                path: application.properties
            name: "{{ .Chart.Name }}-config"
          name: config-volume

