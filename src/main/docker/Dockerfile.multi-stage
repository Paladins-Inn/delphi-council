## Stage 1 : build with maven builder image with native capabilities
FROM quay.io/quarkus/ubi-quarkus-native-image:21.2.0-java11 AS build
COPY --chown=quarkus:quarkus mvnw /code/mvnw
COPY --chown=quarkus:quarkus .mvn /code/.mvn
COPY --chown=quarkus:quarkus pom.xml /code/
COPY --chown=quarkus:quarkus src /code/


USER quarkus

WORKDIR /code

# Build the java stuff
RUN ./mvnw -B org.apache.maven.plugins:maven-dependency-plugin:3.1.2:go-offline
RUN ./mvnw package -Pnative -DskipTests=true \
 -Dquarkus.container-image-build=false

## Stage 2 : create the docker final image
FROM registry.access.redhat.com/ubi8/ubi-minimal:8.5
WORKDIR /work/
COPY --from=build /code/target/*-runner /work/application

# set up permissions for user `1001`
RUN chmod 775 /work /work/application \
  && chown -R 1001 /work \
  && chmod -R "g+rwX" /work \
  && chown -R 1001:root /work

LABEL io.k8s.description="@project.description@"
LABEL io.k8s.display-name="@project.name@"
LABEL io.openshift.expose-services="8080/TCP, 8443/TCP"
LABEL io.openshift.non-scalable false
LABEL io.openshift.min-memory 256Mi
LABEL io.openshift.min-cpu 200m
LABEL io.openshift.tags="quarkus,patternfly,react,typescript,rpg"
LABEL name="@project.artifactId@"
LABEL url=https://www.kaiserpfalz-edv.de/delphi-council-is
LABEL maintainer="@project.organization.name@"
LABEL summary="@project.description@"
LABEL vendor="@project.organization.name@"
LABEL author="Roland T. Lichti <rlichti@kaiserpfalz-edv.de>"
LABEL version="@project.version@"

ENV LANG='en_GB.UTF-8' \
    LANGUAGE='en_GB:en' \
    APP_NAME="@project.artifactId@" \
    APP_VERSION="@project.version@" \
    VERSION="@project.version@"

EXPOSE 8080 8443
USER 1001

CMD ["./application", "-Dquarkus.http.host=0.0.0.0"]